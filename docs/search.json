[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to my homepage!",
    "section": "",
    "text": "Hey there!! I am a rising junior majoring in Computer Science & Mathematics at Mount Holyoke College. I am interested in creating tech products that can be used for the public good, which is exactly why I am also pursuing a Nexus in Law, Public Policy and Human Rights.\nI am currently exploring Computer Science research, specifically, those that fall under Human-Computer Interactions as well as the application of Computer Science in other fields as a data exploration research tool\n\n\n\n\n\n\n\n\nFigure 1: This is me and my friend at Diwali!\n\n\n\n\n\nIf you want to contact me, please feel free to connect with me via LinkedIn"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hey there!! I am a sophomore majoring in Computer Science & Mathematics at Mount Holyoke College. I am also pursuing a"
  },
  {
    "objectID": "STAT 244 Homework 1.html",
    "href": "STAT 244 Homework 1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "Getting Started\n\n\n\n\n\n\nAdd your name to the author field in the YAML header.\nMake sure you can render your document. The keyboard shortcut for rendering is Command+Shift+K for MacOS/Linux and Ctrl+Shift+K for Windows. For now, I recommend rendering to HTML."
  },
  {
    "objectID": "STAT 244 Homework 1.html#configuring-rstudio-with-github",
    "href": "STAT 244 Homework 1.html#configuring-rstudio-with-github",
    "title": "Assignment 1",
    "section": "Configuring RStudio with Github",
    "text": "Configuring RStudio with Github\nHere are the instructions for getting you started on using Github.\nPlease use the Mount Holyoke RStudio server (link: rstudio.mtholyoke.edu) to complete all of these tasks.\n\nWhy? The school server uses Linux, which means that the instructions I give (which are Linux-specific at times) will apply to all of you. If you choose to use R/RStudio on your personal laptop for connecting to Github, certain instructions will differ depending on whether your operating system is Windows or MacOS, so you will have to research what to do and/or make an appointment with me to set it up!\n\nIf you need to access the server off-campus (i.e., when not connected to MHC WiFi), then you will need to set up a VPN (instructions: here); come talk to Laura if you need help with this!\n\n\n\n\n\n\nExercise 1\n\n\n\n\n\nFor those that missed class on Wednesday Feb. 19th:\n\ngo to github.com and create an account associated with your Mount Holyoke email address (if you don’t have one already);\ngo through and follow the video Portfolio Part 1: Get Started with Github.\n\nFor those that attended class on Wed. Feb. 19th and\n\nsuccessfully created a README.md file, where\nREADME.md is in the same location as the .gitignore and your Rproj file (mine was called test_website.Rproj),\n\nyou should:\n\njump to 02:28 in Portfolio Part 2: Configure RStudio to Use Github and complete the video.\n\nThen complete Portfolio Part 3: Push to Github from RStudio, and be sure to read the accompanying instructions on Moodle!\nTo complete this exercise, your README.md should be pushed to Github.\n\nBy going to github.com/GITHUBUSERNAME/YOURWEBSITENAME.github.io, I should be able to see your README.md file rendered/displayed automatically.\n\n\nINCLUDE A LINK TO YOUR GITHUB REPOSITORY WITH YOUR RENDERED README FILE HERE. FOR EXAMPLE, MINE IS https://github.com/Clementine27/thungo.github.io\n\nOf course, there are easier ways to upload a single README to Github without going through the three video tutorials. The point of doing the process in the videos is to configure RStudio to easily push to Github to help you easily manage your portfolio website.\n\n\n\nIf at any point you run into issues, please email me (lalyman@mtholyoke.edu) before trying to research the problem and fix it yourself.\n\nWhy? Normally I love when students self-research to problem-solve, but it is easy to put this initial set-up into a state that is difficult to debug (especially for me, since I am not a computer scientist who is an expert on version control, HTTPS/SSH, digital signatures via generated keys, etc.)"
  },
  {
    "objectID": "STAT 244 Homework 1.html#creating-functions-in-r",
    "href": "STAT 244 Homework 1.html#creating-functions-in-r",
    "title": "Assignment 1",
    "section": "Creating Functions in R",
    "text": "Creating Functions in R\nIt is often good practice to define our own functions when coding. Some reasons are to:\n\navoid having a bunch of repeated code (often the case if you find yourself copy/pasting the same commands into separate code chunks only to, say, change a few numbers);\nimprove readability (since you are organizing your logic into separate, manageable pieces);\nmake debugging easier (since you can more easily isolate where an error is happening by testing each function individually).\n\nThe general syntax for writing a function in R is:\nyour_function_name &lt;- function(x,y,...) {\n  # Code for what the function returns\n}\nwhere x,y,... are whatever inputs you would like your function to depend on.\n\n\n\n\n\n\nExercise 2\n\n\n\n\n\nFinish the code in the chunk below to create a function named check_if_in_circle:\n\nThe function takes in an x and y coordinate.\nIt returns TRUE if (x,y) is within the unit circle (i.e., the circle of radius 1 centered at the origin), and it returns FALSE otherwise.\n\nNote that writing #| error: true at the start of a code chunk tells our document to render even if that chunk produces an error.\n\ncheck_if_in_circle &lt;- function(x,y) {\n    return ((x^2 + y^2) &lt;= 1 )\n}\n\n\n\n\nTo verify that the check_if_in_circle function is working correctly, run the following:\n\n# Should return TRUE\ncheck_if_in_circle(0, 0.99)\n\n[1] TRUE\n\n# Should return TRUE\ncheck_if_in_circle(-0.5, 0.5)\n\n[1] TRUE\n\n# Should return FALSE\ncheck_if_in_circle(1.1, 0.5)\n\n[1] FALSE\n\n# Should return FALSE\ncheck_if_in_circle(0.6, -0.85)\n\n[1] FALSE\n\n\nWithout doing anything different, we can notice that your code (by default!) also works when the inputs are (equally sized) lists \\((x_1, \\ldots, x_n)\\) and \\((y_1, \\ldots, y_n)\\) of x and y coordinates.\nIf given lists of coordinates, check_if_in_circle will return a list of booleans (i.e., TRUE/FALSE values), where the \\(i\\)th boolean is TRUE if \\((x_i, y_i)\\) is in the unit circle and FALSE otherwise.\n\n# List of x coordinates\nx_vec = c(0, -0.5, 1.1, 0.6) \n# List of y coordinates\ny_vec = c(0.99, 0.5, 0.5, -0.85)\n\n# Should return the list TRUE, TRUE, FALSE, FALSE, since\n# (0,0.99) and (-0.5, 0.5) are in the unit circle (as you just verified),\n# while (1.1, 0.5) and (0.6, -0.85) are not in the unit circle (as you\n# also just verified)\ncheck_if_in_circle(x_vec, y_vec)\n\n[1]  TRUE  TRUE FALSE FALSE\n\n\n\n\n\n\n\n\nExercise 3\n\n\n\n\n\nComplete the function return_color , which:\n\ntakes two lists x_vec = \\((x_1, \\ldots, x_n)\\) and y_vec = \\((y_1, \\ldots, y_n)\\) of x and y coordinates;\nreturns a list of the same length as x_vec and y_vec where each entry is either the string “blue” or the string “red”; namely, the \\(i\\)th entry is “blue” if \\((x_i, y_i)\\) is in the unit circle and is “red” otherwise.\n\n\nreturn_color &lt;- function(x_vec, y_vec) {\n  # YOUR CODE HERE\n  resultList = vector(mode = \"list\", length = length(x_vec))\n  for (i in seq(length(x_vec))){\n    if (check_if_in_circle(x_vec[i], y_vec[i])){\n      resultList[[i]] = \"blue\"\n    }\n    else {\n      resultList[[i]] = \"red\"\n    }\n  } \n  return (resultList)\n    \n}\n\n\n# Should return \"blue\", \"blue\", \"red\", \"red\"\nreturn_color(x_vec, y_vec)\n\n[[1]]\n[1] \"blue\"\n\n[[2]]\n[1] \"blue\"\n\n[[3]]\n[1] \"red\"\n\n[[4]]\n[1] \"red\""
  },
  {
    "objectID": "STAT 244 Homework 1.html#mc-simulation-estimating-the-area-of-a-region",
    "href": "STAT 244 Homework 1.html#mc-simulation-estimating-the-area-of-a-region",
    "title": "Assignment 1",
    "section": "MC Simulation: Estimating the Area of a Region",
    "text": "MC Simulation: Estimating the Area of a Region\n\nVocabulary\n\nEvery time you generate random numbers (according to some probability model/distribution), this is called sampling from the distribution.\n\nFor example,\n\nwhen we run rnorm(1, mean = 0, sd = 1) we are sampling once from the standard normal distribution; i.e., sampling values from \\(X \\sim \\mathcal{N}(0,1)\\);\nwhen we run runif(n, a, b) we are sampling \\(n\\) times uniformly at random from the interval \\((a,b)\\); i.e., sampling values of \\(X \\sim U(a,b)\\); this means that \\(X\\) is equally likely to equal any value on the continuum between \\(a\\) and \\(b\\).\n\n\n\n\n\n\n\nExercise 4\n\n\n\n\n\nFill in the code below to sample points within the box \\([-1, 1] \\times [-1, 1]\\) uniformly at random. Hint. Look at your NotesDay3.qmd file (which you submitted on Moodle under Intro to Quarto Lab).\n\n# To make this code reproducible (same random number generated each time)\nset.seed(111)\n# Number of times to sample a point from the [-1,1] x [-1, 1] box\nnum_points = 10000\n\n# Sample x and y from the range [-1,1] uniformly at random\n# 100000 times\n\nx &lt;- runif(num_points, -1,1)\ny &lt;- runif(num_points, -1,1)\n  \n\n# The cbind() function takes two lists (of equal length) and puts them\n# into a table, where each list is a column of that table. The c stands\n# for \"column\" \ngenerated_data &lt;- data.frame(cbind(x, y))\n\n\n\n\nNow, when applied to a list of booleans (i.e., TRUE/FALSE values), the sum function will add up the number of TRUE values in the list. We can try this out below:\n\nlist_of_booleans = c(TRUE, FALSE, FALSE, TRUE, FALSE)\nsum(list_of_booleans)\n\n[1] 2\n\n\n\n\n\n\n\n\nExercise 5\n\n\n\n\n\nFill in the code below to estimate the value of \\(\\pi\\) according to this MC simulation using:\n\nthe sum function\nyour check_if_in_circle function\nx, y, and num_points from two code chunks above\nthe fact that the circle area = \\(\\pi\\cdot r^2\\) = \\(\\pi\\) for the unit circle.\n\nPlease try to figure this out without using external resources; otherwise, it ruins your chance to problem-solve! I am happy to help guide you – just ask!\n\nnum_pts_inside = sum(check_if_in_circle(x,y))\n\npi_estimate = 4*num_pts_inside/num_points\nprint(num_pts_inside)\n\n[1] 7831\n\n\n\n\n\nIf successful, we can use our function return_color from before to visualize the process of marking whether points are included/excluded from the unit circle while displaying the corresponding pi_estimate. You should not need to modify the code in the chunk below.\n\n# Plot the points\nggplot(data = generated_data, \n       mapping = aes(x, y, col = return_color(x, y))) + \ngeom_point() + \nggtitle(paste(\"Estimated value of pi:\", pi_estimate)) +\ntheme(legend.position=\"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 6\n\n\n\n\n\nEstimate \\(\\pi\\) based instead on the upper right quarter of the unit circle rather than the whole circle. That is, sample uniformly at random in the box \\([0,1] \\times [0,1]\\) and consider when points land in the corresponding quarter of the unit circle centered at \\((0,0)\\).\nHints.\n\nInstead of check_if_in_circle, you will need a similar function that checks for whether input points fall in the upper right quadrant of the unit circle.\nYou will need to change how the runif function is called to select x and y.\nYour final calculation of pi_estimate might change slightly. (Do you still multiply by 4? Why?)\n\n\nset.seed(123)\n# Number of times to sample a point from the [0,1] x [0,1] box\nnum_points = 10000\n\n# YOUR CODE HERE \nx &lt;- runif(num_points,0 ,1)\ny &lt;- runif(num_points,0,1)\n\npointsIn = sum(check_if_in_circle(x,y)) \n# technically, we can still reuse the function from before because the range of numbers that x ,y takes guarantees that points only populates the first quad, so we only need to check if it falls within the circle or not, which the old function obviously does \n\nnew_pi_estimate = 4 *pointsIn/num_points  # we're still x4 because the area we have is only 1/4 of the area of the circle \n\nAfter completing your code, include a visualization (like the one from the previous exercise) that displays how your algorithm is sampling and the \\(\\pi\\) estimate corresponding to that sampling.\n\n# CODE FOR VISUALAIZATION HERE \ngenerated_data &lt;- data.frame(cbind(x, y))\n\nggplot(data = generated_data, \n       mapping = aes(x, y, col = return_color(x, y))) + \ngeom_point() + \nggtitle(paste(\"Estimated value of pi:\", pi_estimate)) +\ntheme(legend.position=\"none\")"
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Research",
    "section": "",
    "text": "I am currently working in 2 labs!!"
  },
  {
    "objectID": "index.html#small-steps-mhc",
    "href": "index.html#small-steps-mhc",
    "title": "Welcome to my homepage!",
    "section": "Small Steps @MHC",
    "text": "Small Steps @MHC\nI am under the guidance of professor [He who I don’t want to namedrop just yet] ## LASER @UMass Amherst {.tabset}\nI am under the guidance of professor [She who I don’t want to namedrop just yet either]"
  },
  {
    "objectID": "index.html#laser-umass-amherst",
    "href": "index.html#laser-umass-amherst",
    "title": "Welcome to my homepage!",
    "section": "LASER @UMass Amherst",
    "text": "LASER @UMass Amherst"
  },
  {
    "objectID": "index.html#pioneer-valley",
    "href": "index.html#pioneer-valley",
    "title": "Welcome to my homepage!",
    "section": "Pioneer Valley",
    "text": "Pioneer Valley"
  },
  {
    "objectID": "index.html#crim",
    "href": "index.html#crim",
    "title": "Welcome to my homepage!",
    "section": "CRIM",
    "text": "CRIM"
  },
  {
    "objectID": "index.html#p",
    "href": "index.html#p",
    "title": "Welcome to my homepage!",
    "section": "P",
    "text": "P"
  },
  {
    "objectID": "research.html#small-steps-mhc",
    "href": "research.html#small-steps-mhc",
    "title": "Research",
    "section": "Small Steps @MHC",
    "text": "Small Steps @MHC\nI am under the guidance of professor [He who shall not be namedropped just yet or at least until I have received his consent]"
  },
  {
    "objectID": "research.html#laser-umass-amherst",
    "href": "research.html#laser-umass-amherst",
    "title": "Research",
    "section": "LASER @UMass Amherst",
    "text": "LASER @UMass Amherst\nI am under the guidance of professor [She who shall not be namedropped just yet or at least until I have received her consent]"
  },
  {
    "objectID": "STAT_244-SC.html",
    "href": "STAT_244-SC.html",
    "title": "STAT 244-SC",
    "section": "",
    "text": "In my Computational Statistics course, I learned to use some neat ‘machine learning’ algorithms and got the chance to practice them in a final project in a team of three. Our team decided to explore the well-known Breast Cancer (Wisconsin) data set, which details information about various breast masses with 1 variable for diagnosis of whether or not a breast mass is cancerous or malignant and various other numeric variables which further specify the characteristics of the breast mass itself.\nIn our exploration, we used 3 techniques: Cross-Validation, the classic logistic regression, and K-Means Clustering. Rather than offering mutually exclusive insights, they each act as a supporting reference for the other two’s results, which is particularly true with the last 2 methods. The K-Means plots we arrived at showed us the clear divide between malignant and benign tumor’s in their measurements of a few explanatory variables of interest.\nFor example, there were clear differences between texture_mean and radius_mean measurements between benign and malignant tumors as shown in the plot below. This confirmed our suspicion that these two would be good explanatory variables for predicting diagnosis when we were creating the logistics regression model.\n\n\n\n\n\n\n\n\n\nThe following present some of our predictor models"
  }
]